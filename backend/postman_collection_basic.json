{
  "info": {
    "name": "Backend APIs - Testing Completo",
    "description": "Colecci√≥n completa para probar las APIs del backend con variables de entorno optimizadas",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "version": "2.0"
  },
  "variable": [
    {
      "key": "aws_region",
      "value": "us-east-1",
      "description": "Regi√≥n de AWS donde est√°n desplegadas las APIs"
    },
    {
      "key": "stage",
      "value": "dev",
      "description": "Stage de deployment (dev, prod, etc.)"
    },
    {
      "key": "api_usuarios_id",
      "value": "TU_API_USUARIOS_ID",
      "description": "üîß CAMBIAR: ID del API Gateway para usuarios (ej: abc123xyz)"
    },
    {
      "key": "api_productos_id",
      "value": "TU_API_PRODUCTOS_ID", 
      "description": "üîß CAMBIAR: ID del API Gateway para productos (ej: def456uvw)"
    },
    {
      "key": "api_compras_id",
      "value": "TU_API_COMPRAS_ID",
      "description": "üîß CAMBIAR: ID del API Gateway para compras (ej: ghi789rst)"
    },
    {
      "key": "base_url_usuarios",
      "value": "https://{{api_usuarios_id}}.execute-api.{{aws_region}}.amazonaws.com/{{stage}}",
      "description": "URL completa para API Usuarios (se construye autom√°ticamente)"
    },
    {
      "key": "base_url_productos",
      "value": "https://{{api_productos_id}}.execute-api.{{aws_region}}.amazonaws.com/{{stage}}",
      "description": "URL completa para API Productos (se construye autom√°ticamente)"
    },
    {
      "key": "base_url_compras",
      "value": "https://{{api_compras_id}}.execute-api.{{aws_region}}.amazonaws.com/{{stage}}",
      "description": "URL completa para API Compras (se construye autom√°ticamente)"
    },
    {
      "key": "jwt_token",
      "value": "",
      "description": "Token JWT obtenido del login (se actualiza autom√°ticamente)"
    },
    {
      "key": "tenant_id",
      "value": "tenant1",
      "description": "ID del tenant para multi-tenancy"
    },
    {
      "key": "test_user_email",
      "value": "test@backend.com",
      "description": "Email del usuario de testing"
    },
    {
      "key": "test_user_password",
      "value": "password123",
      "description": "Password del usuario de testing"
    },
    {
      "key": "test_user_name",
      "value": "Usuario Test Backend",
      "description": "Nombre del usuario de testing"
    },
    {
      "key": "last_compra_id",
      "value": "",
      "description": "ID de la √∫ltima compra creada (se actualiza autom√°ticamente)"
    },
    {
      "key": "last_producto_codigo",
      "value": "",
      "description": "C√≥digo del √∫ltimo producto creado (se actualiza autom√°ticamente)"
    }
  ],
  "item": [
    {
      "name": "1. üë§ API USUARIOS",
      "item": [
        {
          "name": "1.1 ‚úÖ Crear Usuario",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validar respuesta exitosa",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    console.log('‚úÖ Usuario creado exitosamente');",
                  "    console.log('Email:', pm.collectionVariables.get('test_user_email'));",
                  "    console.log('Tenant:', pm.collectionVariables.get('tenant_id'));",
                  "    if (response.user_id) {",
                  "        console.log('User ID:', response.user_id);",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Error creando usuario - C√≥digo:', pm.response.code);",
                  "    console.log('Respuesta:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"{{test_user_password}}\",\n  \"nombre\": \"{{test_user_name}}\",\n  \"tenant_id\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url_usuarios}}/usuarios/registro",
              "host": ["{{base_url_usuarios}}"],
              "path": ["usuarios", "registro"]
            },
            "description": "Crear nuevo usuario en el sistema con datos de testing predefinidos"
          }
        },
        {
          "name": "1.2 üîë Login Usuario (Obtener Token)",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Extraer y guardar token autom√°ticamente",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    if (response.token) {",
                  "        pm.collectionVariables.set('jwt_token', response.token);",
                  "        console.log('‚úÖ Login exitoso - Token JWT guardado');",
                  "        console.log('Token preview:', response.token.substring(0, 50) + '...');",
                  "        console.log('V√°lido por: 1 hora');",
                  "        ",
                  "        // Mostrar info del usuario",
                  "        if (response.user) {",
                  "            console.log('Usuario logueado:', response.user.nombre);",
                  "            console.log('Email:', response.user.email);",
                  "        }",
                  "    } else {",
                  "        console.log('‚ùå Login exitoso pero sin token en respuesta');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Error en login - C√≥digo:', pm.response.code);",
                  "    console.log('Mensaje:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"{{test_user_password}}\",\n  \"tenant_id\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url_usuarios}}/usuarios/login",
              "host": ["{{base_url_usuarios}}"],
              "path": ["usuarios", "login"]
            },
            "description": "Login de usuario y obtenci√≥n de token JWT (v√°lido por 1 hora)"
          }
        },
        {
          "name": "1.3 ‚úÖ Validar Token",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validar token y mostrar info",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('‚úÖ Token v√°lido y autorizado');",
                  "    console.log('User ID:', response.user_id);",
                  "    console.log('Email:', response.email);",
                  "    console.log('Tenant ID:', response.tenant_id);",
                  "    console.log('Rol:', response.role);",
                  "} else {",
                  "    console.log('‚ùå Token inv√°lido o expirado - C√≥digo:', pm.response.code);",
                  "    console.log('Realizar login nuevamente');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url_usuarios}}/usuarios/validar",
              "host": ["{{base_url_usuarios}}"],
              "path": ["usuarios", "validar"]
            },
            "description": "Validar que el token JWT es v√°lido y obtener informaci√≥n del usuario"
          }
        }
      ]
    },
    {
      "name": "2. üì¶ API PRODUCTOS",
      "item": [
        {
          "name": "2.1 üì¶ Crear Producto - B√°sico",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Guardar c√≥digo del producto creado",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    console.log('‚úÖ Producto b√°sico creado exitosamente');",
                  "    console.log('C√≥digo:', response.codigo);",
                  "    console.log('Nombre:', response.nombre);",
                  "    console.log('Precio: $' + response.precio);",
                  "    console.log('Stock:', response.stock);",
                  "    pm.collectionVariables.set('last_producto_codigo', response.codigo);",
                  "} else {",
                  "    console.log('‚ùå Error creando producto - C√≥digo:', pm.response.code);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"codigo\": \"TEST001\",\n  \"nombre\": \"Producto Test B√°sico\",\n  \"descripcion\": \"Producto para testing de la API - Precio bajo\",\n  \"precio\": 99.99,\n  \"stock\": 100,\n  \"categoria\": \"Testing\"\n}"
            },
            "url": {
              "raw": "{{base_url_productos}}/productos",
              "host": ["{{base_url_productos}}"],
              "path": ["productos"]
            },
            "description": "Crear producto b√°sico para testing (precio < $500)"
          }
        },
        {
          "name": "2.2 üíé Crear Producto - Premium",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validar producto premium creado",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    console.log('‚úÖ Producto premium creado exitosamente');",
                  "    console.log('C√≥digo:', response.codigo);",
                  "    console.log('Precio: $' + response.precio + ' (> $500 - Candidato para Step Functions)');",
                  "    console.log('Stock:', response.stock);",
                  "} else {",
                  "    console.log('‚ùå Error creando producto premium - C√≥digo:', pm.response.code);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"codigo\": \"TEST002\",\n  \"nombre\": \"Laptop Gaming Premium\",\n  \"descripcion\": \"Laptop para gaming de alta gama con RTX 4080\",\n  \"precio\": 1599.99,\n  \"stock\": 25,\n  \"categoria\": \"Electr√≥nicos\"\n}"
            },
            "url": {
              "raw": "{{base_url_productos}}/productos",
              "host": ["{{base_url_productos}}"],
              "path": ["productos"]
            },
            "description": "Crear producto premium (precio > $500) - Futuro candidato para Step Functions"
          }
        },
        {
          "name": "2.3 ‚ö†Ô∏è Crear Producto - Stock Limitado",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validar producto con stock limitado",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    console.log('‚úÖ Producto con stock limitado creado');",
                  "    console.log('C√≥digo:', response.codigo);",
                  "    console.log('Stock:', response.stock + ' (< 10 - Candidato para alertas de inventario)');",
                  "    console.log('Precio: $' + response.precio);",
                  "} else {",
                  "    console.log('‚ùå Error creando producto stock limitado - C√≥digo:', pm.response.code);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"codigo\": \"TEST003\",\n  \"nombre\": \"Mouse Inal√°mbrico Gaming\",\n  \"descripcion\": \"Mouse inal√°mbrico ergon√≥mico para gaming\",\n  \"precio\": 29.99,\n  \"stock\": 5,\n  \"categoria\": \"Accesorios\"\n}"
            },
            "url": {
              "raw": "{{base_url_productos}}/productos",
              "host": ["{{base_url_productos}}"],
              "path": ["productos"]
            },
            "description": "Crear producto con stock limitado (< 10) - Futuro candidato para alertas de inventario"
          }
        },
        {
          "name": "2.4 üìã Listar Productos",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Mostrar resumen de productos",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('‚úÖ Productos listados exitosamente');",
                  "    console.log('Total productos:', response.productos.length);",
                  "    ",
                  "    response.productos.forEach((producto, index) => {",
                  "        console.log(`${index + 1}. ${producto.codigo} - ${producto.nombre} ($${producto.precio}) - Stock: ${producto.stock}`);",
                  "    });",
                  "    ",
                  "    if (response.lastEvaluatedKey) {",
                  "        console.log('Hay m√°s productos disponibles (paginaci√≥n)');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Error listando productos - C√≥digo:', pm.response.code);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url_productos}}/productos?limit=20",
              "host": ["{{base_url_productos}}"],
              "path": ["productos"],
              "query": [
                {
                  "key": "limit",
                  "value": "20",
                  "description": "L√≠mite de productos por p√°gina"
                }
              ]
            },
            "description": "Listar productos con paginaci√≥n"
          }
        },
        {
          "name": "2.5 üîç Buscar Producto por C√≥digo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Mostrar detalles del producto encontrado",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('‚úÖ Producto encontrado:');",
                  "    console.log('C√≥digo:', response.codigo);",
                  "    console.log('Nombre:', response.nombre);",
                  "    console.log('Descripci√≥n:', response.descripcion);",
                  "    console.log('Precio: $' + response.precio);",
                  "    console.log('Stock actual:', response.stock);",
                  "    console.log('Categor√≠a:', response.categoria);",
                  "    console.log('Creado:', response.created_at);",
                  "    console.log('Actualizado:', response.updated_at);",
                  "} else if (pm.response.code === 404) {",
                  "    console.log('‚ùå Producto no encontrado');",
                  "} else {",
                  "    console.log('‚ùå Error buscando producto - C√≥digo:', pm.response.code);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url_productos}}/productos/TEST001",
              "host": ["{{base_url_productos}}"],
              "path": ["productos", "TEST001"]
            },
            "description": "Buscar producto espec√≠fico por c√≥digo"
          }
        },
        {
          "name": "2.6 ‚úèÔ∏è Modificar Producto",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validar modificaci√≥n exitosa",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('‚úÖ Producto modificado exitosamente');",
                  "    console.log('C√≥digo:', response.codigo);",
                  "    console.log('Precio actualizado: $' + response.precio);",
                  "    console.log('Stock actualizado:', response.stock);",
                  "    console.log('Descripci√≥n actualizada:', response.descripcion);",
                  "} else {",
                  "    console.log('‚ùå Error modificando producto - C√≥digo:', pm.response.code);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"precio\": 89.99,\n  \"stock\": 95,\n  \"descripcion\": \"Producto para testing de la API - PRECIO ACTUALIZADO - OFERTA ESPECIAL\"\n}"
            },
            "url": {
              "raw": "{{base_url_productos}}/productos/TEST001",
              "host": ["{{base_url_productos}}"],
              "path": ["productos", "TEST001"]
            },
            "description": "Modificar precio, stock y descripci√≥n del producto TEST001"
          }
        }
      ]
    },
    {
      "name": "3. üõí API COMPRAS",
      "item": [
        {
          "name": "3.1 üõí Compra Simple",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Guardar ID de compra y mostrar detalles",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    ",
                  "    if (response.compra) {",
                  "        pm.collectionVariables.set('last_compra_id', response.compra.compra_id);",
                  "        console.log('‚úÖ Compra simple creada exitosamente');",
                  "        console.log('Compra ID:', response.compra.compra_id);",
                  "        console.log('Total: $' + response.compra.total);",
                  "        console.log('Estado:', response.compra.estado);",
                  "        console.log('Productos:');",
                  "        response.compra.productos.forEach(p => {",
                  "            console.log(`  - ${p.codigo}: ${p.cantidad} x $${p.precio_unitario} = $${p.subtotal}`);",
                  "        });",
                  "    } else {",
                  "        console.log('‚ùå Estructura de respuesta inesperada');",
                  "        console.log('Respuesta completa:', JSON.stringify(response, null, 2));",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Error en compra simple - C√≥digo:', pm.response.code);",
                  "    console.log('Respuesta:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productos\": [\n    {\n      \"codigo\": \"TEST001\",\n      \"cantidad\": 2\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url_compras}}/compras",
              "host": ["{{base_url_compras}}"],
              "path": ["compras"]
            },
            "description": "Compra simple de 2 unidades del producto b√°sico"
          }
        },
        {
          "name": "3.2 üõí Compra M√∫ltiple",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Guardar ID y mostrar detalles de compra m√∫ltiple",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    ",
                  "    if (response.compra) {",
                  "        pm.collectionVariables.set('last_compra_id', response.compra.compra_id);",
                  "        console.log('‚úÖ Compra m√∫ltiple creada exitosamente');",
                  "        console.log('Compra ID:', response.compra.compra_id);",
                  "        console.log('Total: $' + response.compra.total);",
                  "        console.log('N√∫mero de productos diferentes:', response.compra.productos.length);",
                  "        console.log('Estado:', response.compra.estado);",
                  "        console.log('Detalles:');",
                  "        response.compra.productos.forEach(p => {",
                  "            console.log(`  - ${p.codigo}: ${p.cantidad} x $${p.precio_unitario} = $${p.subtotal}`);",
                  "        });",
                  "    } else {",
                  "        console.log('‚ùå Estructura de respuesta inesperada');",
                  "        console.log('Respuesta completa:', JSON.stringify(response, null, 2));",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Error en compra m√∫ltiple - C√≥digo:', pm.response.code);",
                  "    console.log('Respuesta:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productos\": [\n    {\n      \"codigo\": \"TEST001\",\n      \"cantidad\": 1\n    },\n    {\n      \"codigo\": \"TEST003\",\n      \"cantidad\": 2\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url_compras}}/compras",
              "host": ["{{base_url_compras}}"],
              "path": ["compras"]
            },
            "description": "Compra m√∫ltiple con diferentes productos"
          }
        },
        {
          "name": "3.3 üíé Compra Premium",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Guardar ID y nota especial para Step Functions",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    ",
                  "    if (response.compra) {",
                  "        pm.collectionVariables.set('last_compra_id', response.compra.compra_id);",
                  "        console.log('‚úÖ Compra premium creada exitosamente');",
                  "        console.log('Compra ID:', response.compra.compra_id);",
                  "        console.log('Total: $' + response.compra.total + ' (> $500)');",
                  "        console.log('Estado:', response.compra.estado);",
                  "        console.log('');",
                  "        console.log('üî• IMPORTANTE: Esta compra ser√≠a procesada por Step Functions');",
                  "        console.log('   - Requerir√≠a aprobaci√≥n humana por monto > $500');",
                  "        console.log('   - Procesamiento as√≠ncrono con workflow');",
                  "        console.log('   - Env√≠o de notificaciones autom√°ticas');",
                  "    } else {",
                  "        console.log('‚ùå Estructura de respuesta inesperada');",
                  "        console.log('Respuesta completa:', JSON.stringify(response, null, 2));",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Error en compra premium - C√≥digo:', pm.response.code);",
                  "    console.log('Respuesta:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productos\": [\n    {\n      \"codigo\": \"TEST002\",\n      \"cantidad\": 1\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url_compras}}/compras",
              "host": ["{{base_url_compras}}"],
              "path": ["compras"]
            },
            "description": "Compra de producto premium (>$500) - Futuro candidato para Step Functions con aprobaci√≥n"
          }
        },
        {
          "name": "3.4 ‚ö†Ô∏è Compra Stock Bajo",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Guardar ID y nota sobre inventario",
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    ",
                  "    if (response.compra) {",
                  "        pm.collectionVariables.set('last_compra_id', response.compra.compra_id);",
                  "        console.log('‚úÖ Compra con impacto en inventario creada');",
                  "        console.log('Compra ID:', response.compra.compra_id);",
                  "        console.log('Total: $' + response.compra.total);",
                  "        console.log('Estado:', response.compra.estado);",
                  "        console.log('');",
                  "        console.log('‚ö†Ô∏è IMPORTANTE: Esta compra afecta inventario');",
                  "        console.log('   - Producto TEST003 quedar√≠a con stock muy bajo');",
                  "        console.log('   - Triggear√≠a InventoryAlertWorkflow en Step Functions');",
                  "        console.log('   - Alertas autom√°ticas de restock');",
                  "    } else {",
                  "        console.log('‚ùå Estructura de respuesta inesperada');",
                  "        console.log('Respuesta completa:', JSON.stringify(response, null, 2));",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Error en compra stock bajo - C√≥digo:', pm.response.code);",
                  "    console.log('Respuesta:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productos\": [\n    {\n      \"codigo\": \"TEST003\",\n      \"cantidad\": 3\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url_compras}}/compras",
              "host": ["{{base_url_compras}}"],
              "path": ["compras"]
            },
            "description": "Compra que deja producto con stock muy bajo - Futuro candidato para alertas de inventario"
          }
        },
        {
          "name": "3.5 üìä Listar Compras del Usuario",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Mostrar resumen de todas las compras",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    console.log('‚úÖ Compras del usuario listadas exitosamente');",
                  "    console.log('Total compras realizadas:', response.compras.length);",
                  "    ",
                  "    let totalGastado = 0;",
                  "    response.compras.forEach((compra, index) => {",
                  "        console.log(`${index + 1}. ID: ${compra.compra_id} - Total: $${compra.total} - Estado: ${compra.estado}`);",
                  "        totalGastado += parseFloat(compra.total);",
                  "    });",
                  "    ",
                  "    console.log('');",
                  "    console.log('üí∞ Total gastado: $' + totalGastado.toFixed(2));",
                  "    ",
                  "    if (response.lastEvaluatedKey) {",
                  "        console.log('Hay m√°s compras disponibles (paginaci√≥n)');",
                  "    }",
                  "} else {",
                  "    console.log('‚ùå Error listando compras - C√≥digo:', pm.response.code);",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url_compras}}/compras?limit=10",
              "host": ["{{base_url_compras}}"],
              "path": ["compras"],
              "query": [
                {
                  "key": "limit",
                  "value": "10",
                  "description": "L√≠mite de compras por p√°gina"
                }
              ]
            },
            "description": "Listar todas las compras del usuario autenticado con resumen financiero"
          }
        },
        {
          "name": "3.6 üîç Obtener Compra Espec√≠fica",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Mostrar detalles completos de la compra",
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    ",
                  "    if (response.compra) {",
                  "        console.log('‚úÖ Detalles de compra obtenidos exitosamente');",
                  "        console.log('Compra ID:', response.compra.compra_id);",
                  "        console.log('Estado:', response.compra.estado);",
                  "        console.log('Total: $' + response.compra.total);",
                  "        console.log('Fecha:', response.compra.created_at);",
                  "        console.log('Usuario:', response.compra.user_id);",
                  "        console.log('Tenant:', response.compra.tenant_id);",
                  "        console.log('');",
                  "        ",
                  "        if (response.compra.productos && response.compra.productos.length > 0) {",
                  "            console.log('Productos comprados:');",
                  "            response.compra.productos.forEach(p => {",
                  "                console.log(`  - ${p.codigo}: ${p.cantidad} x $${p.precio_unitario} = $${p.subtotal}`);",
                  "            });",
                  "        } else {",
                  "            console.log('No hay productos en esta compra.');",
                  "        }",
                  "    } else {",
                  "        console.log('‚ùå Estructura de respuesta inesperada');",
                  "        console.log('Respuesta completa:', JSON.stringify(response, null, 2));",
                  "    }",
                  "} else if (pm.response.code === 404) {",
                  "    console.log('‚ùå Compra no encontrada');",
                  "} else {",
                  "    console.log('‚ùå Error obteniendo compra - C√≥digo:', pm.response.code);",
                  "    console.log('Respuesta:', pm.response.text());",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url_compras}}/compras/{{last_compra_id}}",
              "host": ["{{base_url_compras}}"],
              "path": ["compras", "{{last_compra_id}}"]
            },
            "description": "Obtener detalles completos de la √∫ltima compra creada"
          }
        }
      ]
    },
    {
      "name": "4. ‚ùå TESTING DE ERRORES",
      "item": [
        {
          "name": "4.1 üö´ Sin Token de Autorizaci√≥n",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validar error de autorizaci√≥n",
                  "if (pm.response.code === 401) {",
                  "    console.log('‚úÖ Error 401 correcto: Sin autorizaci√≥n');",
                  "    console.log('Mensaje:', pm.response.text());",
                  "} else {",
                  "    console.log('‚ùå Error inesperado - C√≥digo:', pm.response.code);",
                  "    console.log('Se esperaba 401 Unauthorized');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{base_url_productos}}/productos",
              "host": ["{{base_url_productos}}"],
              "path": ["productos"]
            },
            "description": "Intentar acceder a productos sin token - Debe devolver 401 Unauthorized"
          }
        },
        {
          "name": "4.2 üö´ Login con Credenciales Incorrectas",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validar error de credenciales",
                  "if (pm.response.code === 401) {",
                  "    console.log('‚úÖ Error 401 correcto: Credenciales inv√°lidas');",
                  "    console.log('Mensaje:', pm.response.text());",
                  "} else {",
                  "    console.log('‚ùå Error inesperado - C√≥digo:', pm.response.code);",
                  "    console.log('Se esperaba 401 Unauthorized');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"passwordincorrecto\",\n  \"tenant_id\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url_usuarios}}/usuarios/login",
              "host": ["{{base_url_usuarios}}"],
              "path": ["usuarios", "login"]
            },
            "description": "Intentar login con password incorrecto - Debe devolver 401"
          }
        },
        {
          "name": "4.3 üö´ Crear Producto Duplicado",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validar error de duplicado",
                  "if (pm.response.code === 409) {",
                  "    console.log('‚úÖ Error 409 correcto: Producto duplicado');",
                  "    console.log('Mensaje:', pm.response.text());",
                  "} else if (pm.response.code === 400) {",
                  "    console.log('‚úÖ Error 400 correcto: C√≥digo ya existe');",
                  "    console.log('Mensaje:', pm.response.text());",
                  "} else {",
                  "    console.log('‚ùå Error inesperado - C√≥digo:', pm.response.code);",
                  "    console.log('Se esperaba 409 Conflict o 400 Bad Request');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"codigo\": \"TEST001\",\n  \"nombre\": \"Producto Duplicado\",\n  \"descripcion\": \"Intentando usar c√≥digo existente\",\n  \"precio\": 50.00,\n  \"stock\": 10,\n  \"categoria\": \"Error\"\n}"
            },
            "url": {
              "raw": "{{base_url_productos}}/productos",
              "host": ["{{base_url_productos}}"],
              "path": ["productos"]
            },
            "description": "Intentar crear producto con c√≥digo existente - Debe devolver 409 Conflict"
          }
        },
        {
          "name": "4.4 üö´ Buscar Producto Inexistente",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validar error de no encontrado",
                  "if (pm.response.code === 404) {",
                  "    console.log('‚úÖ Error 404 correcto: Producto no encontrado');",
                  "    console.log('Mensaje:', pm.response.text());",
                  "} else {",
                  "    console.log('‚ùå Error inesperado - C√≥digo:', pm.response.code);",
                  "    console.log('Se esperaba 404 Not Found');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "url": {
              "raw": "{{base_url_productos}}/productos/NOEXISTE",
              "host": ["{{base_url_productos}}"],
              "path": ["productos", "NOEXISTE"]
            },
            "description": "Buscar producto que no existe - Debe devolver 404 Not Found"
          }
        },
        {
          "name": "4.5 üö´ Compra con Stock Insuficiente",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validar error de stock",
                  "if (pm.response.code === 400) {",
                  "    console.log('‚úÖ Error 400 correcto: Stock insuficiente');",
                  "    console.log('Mensaje:', pm.response.text());",
                  "} else {",
                  "    console.log('‚ùå Error inesperado - C√≥digo:', pm.response.code);",
                  "    console.log('Se esperaba 400 Bad Request por stock insuficiente');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productos\": [\n    {\n      \"codigo\": \"TEST003\",\n      \"cantidad\": 100\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url_compras}}/compras",
              "host": ["{{base_url_compras}}"],
              "path": ["compras"]
            },
            "description": "Intentar comprar m√°s cantidad que el stock disponible - Debe devolver error 400"
          }
        },
        {
          "name": "4.6 üö´ Compra de Producto Inexistente",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validar error de producto inexistente",
                  "if (pm.response.code === 400 || pm.response.code === 404) {",
                  "    console.log('‚úÖ Error correcto: Producto inexistente en compra');",
                  "    console.log('C√≥digo:', pm.response.code);",
                  "    console.log('Mensaje:', pm.response.text());",
                  "} else {",
                  "    console.log('‚ùå Error inesperado - C√≥digo:', pm.response.code);",
                  "    console.log('Se esperaba 400 Bad Request o 404 Not Found');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{jwt_token}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"productos\": [\n    {\n      \"codigo\": \"NOEXISTE\",\n      \"cantidad\": 1\n    }\n  ]\n}"
            },
            "url": {
              "raw": "{{base_url_compras}}/compras",
              "host": ["{{base_url_compras}}"],
              "path": ["compras"]
            },
            "description": "Intentar comprar producto que no existe - Debe devolver error 400 o 404"
          }
        },
        {
          "name": "4.7 üö´ Crear Usuario Duplicado",
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "// Validar error de usuario duplicado",
                  "if (pm.response.code === 409 || pm.response.code === 400) {",
                  "    console.log('‚úÖ Error correcto: Usuario ya existe');",
                  "    console.log('C√≥digo:', pm.response.code);",
                  "    console.log('Mensaje:', pm.response.text());",
                  "} else {",
                  "    console.log('‚ùå Error inesperado - C√≥digo:', pm.response.code);",
                  "    console.log('Se esperaba 409 Conflict o 400 Bad Request');",
                  "}"
                ]
              }
            }
          ],
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"email\": \"{{test_user_email}}\",\n  \"password\": \"{{test_user_password}}\",\n  \"nombre\": \"Usuario Duplicado\",\n  \"tenant_id\": \"{{tenant_id}}\"\n}"
            },
            "url": {
              "raw": "{{base_url_usuarios}}/usuarios/registro",
              "host": ["{{base_url_usuarios}}"],
              "path": ["usuarios", "registro"]
            },
            "description": "Intentar crear usuario con email ya existente - Debe devolver error 409"
          }
        }
      ]
    }
  ]
}